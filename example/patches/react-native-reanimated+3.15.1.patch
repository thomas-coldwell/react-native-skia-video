diff --git a/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.cpp b/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.cpp
index 6df018d..acbf8ed 100644
--- a/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.cpp
@@ -9,10 +9,10 @@ namespace reanimated {
 // SharedValue
 
 static jsi::Value SPEC_PREFIX(makeShareableClone)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->makeShareableClone(
           rt, std::move(args[0]), std::move(args[1]), std::move(args[2]));
@@ -21,67 +21,67 @@ static jsi::Value SPEC_PREFIX(makeShareableClone)(
 // scheduler
 
 static jsi::Value SPEC_PREFIX(scheduleOnUI)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->scheduleOnUI(rt, std::move(args[0]));
   return jsi::Value::undefined();
 }
 
 static jsi::Value SPEC_PREFIX(executeOnUIRuntimeSync)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->executeOnUIRuntimeSync(rt, std::move(args[0]));
 }
 
 static jsi::Value SPEC_PREFIX(createWorkletRuntime)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->createWorkletRuntime(rt, std::move(args[0]), std::move(args[1]));
 }
 
 static jsi::Value SPEC_PREFIX(scheduleOnRuntime)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->scheduleOnRuntime(rt, std::move(args[0]), std::move(args[1]));
 }
 
 static jsi::Value SPEC_PREFIX(registerEventHandler)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->registerEventHandler(
           rt, std::move(args[0]), std::move(args[1]), std::move(args[2]));
 }
 
 static jsi::Value SPEC_PREFIX(unregisterEventHandler)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->unregisterEventHandler(rt, std::move(args[0]));
   return jsi::Value::undefined();
 }
 
 static jsi::Value SPEC_PREFIX(getViewProp)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->getViewProp(
           rt, std::move(args[0]), std::move(args[1]), std::move(args[2]));
@@ -89,20 +89,20 @@ static jsi::Value SPEC_PREFIX(getViewProp)(
 }
 
 static jsi::Value SPEC_PREFIX(enableLayoutAnimations)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->enableLayoutAnimations(rt, std::move(args[0]));
   return jsi::Value::undefined();
 }
 
 static jsi::Value SPEC_PREFIX(registerSensor)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->registerSensor(
           rt,
@@ -113,58 +113,58 @@ static jsi::Value SPEC_PREFIX(registerSensor)(
 }
 
 static jsi::Value SPEC_PREFIX(unregisterSensor)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->unregisterSensor(rt, std::move(args[0]));
   return jsi::Value::undefined();
 }
 
 static jsi::Value SPEC_PREFIX(configureProps)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->configureProps(rt, std::move(args[0]), std::move(args[1]));
   return jsi::Value::undefined();
 }
 
 static jsi::Value SPEC_PREFIX(subscribeForKeyboardEvents)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->subscribeForKeyboardEvents(rt, std::move(args[0]), std::move(args[1]));
 }
 
 static jsi::Value SPEC_PREFIX(unsubscribeFromKeyboardEvents)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->unsubscribeFromKeyboardEvents(rt, std::move(args[0]));
   return jsi::Value::undefined();
 }
 
 static jsi::Value SPEC_PREFIX(configureLayoutAnimationBatch)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   return static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->configureLayoutAnimationBatch(rt, std::move(args[0]));
 }
 
 static jsi::Value SPEC_PREFIX(setShouldAnimateExiting)(
-    jsi::Runtime &rt,
-    TurboModule &turboModule,
-    const jsi::Value *args,
-    size_t) {
+        jsi::Runtime &rt,
+        TurboModuleX &turboModule,
+        const jsi::Value *args,
+        size_t) {
   static_cast<NativeReanimatedModuleSpec *>(&turboModule)
       ->setShouldAnimateExiting(rt, std::move(args[0]), std::move(args[1]));
   return jsi::Value::undefined();
@@ -172,9 +172,9 @@ static jsi::Value SPEC_PREFIX(setShouldAnimateExiting)(
 
 NativeReanimatedModuleSpec::NativeReanimatedModuleSpec(
     const std::shared_ptr<CallInvoker> &jsInvoker)
-    : TurboModule("NativeReanimated", jsInvoker) {
+    : TurboModuleX("NativeReanimated", jsInvoker) {
   methodMap_["makeShareableClone"] =
-      MethodMetadata{2, SPEC_PREFIX(makeShareableClone)};
+      MethodMetadata{3, SPEC_PREFIX(makeShareableClone)};
 
   methodMap_["scheduleOnUI"] = MethodMetadata{1, SPEC_PREFIX(scheduleOnUI)};
   methodMap_["executeOnUIRuntimeSync"] =
diff --git a/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.h b/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.h
index b4505a0..7a050e5 100644
--- a/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.h
+++ b/node_modules/react-native-reanimated/Common/cpp/reanimated/NativeModules/NativeReanimatedModuleSpec.h
@@ -5,7 +5,7 @@
 #include <vector>
 
 #ifdef ANDROID
-#include "TurboModule.h"
+#include "TurboModuleX.h"
 #else
 #include <ReactCommon/TurboModule.h>
 #endif
@@ -17,7 +17,7 @@ using namespace react;
 
 namespace reanimated {
 
-class JSI_EXPORT NativeReanimatedModuleSpec : public TurboModule {
+class JSI_EXPORT NativeReanimatedModuleSpec : public TurboModuleX {
  protected:
   explicit NativeReanimatedModuleSpec(
       const std::shared_ptr<CallInvoker> &jsInvoker);
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/TurboModule.cpp b/node_modules/react-native-reanimated/android/src/main/cpp/TurboModuleX.cpp
similarity index 90%
rename from node_modules/react-native-reanimated/android/src/main/cpp/TurboModule.cpp
rename to node_modules/react-native-reanimated/android/src/main/cpp/TurboModuleX.cpp
index a946694..79cd4cb 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/TurboModule.cpp
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/TurboModuleX.cpp
@@ -5,21 +5,21 @@
  * LICENSE file in the root directory of this source tree.
  */
 
-#include "TurboModule.h"
+#include "TurboModuleX.h"
 
 using namespace facebook;
 
 namespace facebook {
 namespace react {
 
-TurboModule::TurboModule(
+TurboModuleX::TurboModuleX(
     const std::string &name,
     const std::shared_ptr<CallInvoker> &jsInvoker)
     : name_(name), jsInvoker_(jsInvoker) {}
 
-TurboModule::~TurboModule() {}
+TurboModuleX::~TurboModuleX() {}
 
-jsi::Value TurboModule::get(
+jsi::Value TurboModuleX::get(
     jsi::Runtime &runtime,
     const jsi::PropNameID &propName) {
   std::string propNameUtf8 = propName.utf8(runtime);
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/TurboModule.h b/node_modules/react-native-reanimated/android/src/main/cpp/TurboModuleX.h
similarity index 80%
rename from node_modules/react-native-reanimated/android/src/main/cpp/TurboModule.h
rename to node_modules/react-native-reanimated/android/src/main/cpp/TurboModuleX.h
index 6fd21c7..197a1f6 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/TurboModule.h
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/TurboModuleX.h
@@ -34,12 +34,12 @@ enum TurboModuleMethodValueKind {
 /**
  * Base HostObject class for every module to be exposed to JS
  */
-class JSI_EXPORT TurboModule : public facebook::jsi::HostObject {
+class JSI_EXPORT TurboModuleX : public facebook::jsi::HostObject {
  public:
-  TurboModule(
+  TurboModuleX(
       const std::string &name,
       const std::shared_ptr<CallInvoker> &jsInvoker);
-  virtual ~TurboModule();
+  virtual ~TurboModuleX();
 
   facebook::jsi::Value get(
       facebook::jsi::Runtime &runtime,
@@ -52,10 +52,10 @@ class JSI_EXPORT TurboModule : public facebook::jsi::HostObject {
   struct MethodMetadata {
     size_t argCount;
     facebook::jsi::Value (*invoker)(
-        facebook::jsi::Runtime &rt,
-        TurboModule &turboModule,
-        const facebook::jsi::Value *args,
-        size_t count);
+            facebook::jsi::Runtime &rt,
+            TurboModuleX &turboModule,
+            const facebook::jsi::Value *args,
+            size_t count);
   };
 
   std::unordered_map<std::string, MethodMetadata> methodMap_;
@@ -66,7 +66,7 @@ class JSI_EXPORT TurboModule : public facebook::jsi::HostObject {
  * given a name.
  */
 using TurboModuleProviderFunctionType =
-    std::function<std::shared_ptr<TurboModule>(const std::string &name)>;
+    std::function<std::shared_ptr<TurboModuleX>(const std::string &name)>;
 
 } // namespace react
 } // namespace facebook
diff --git a/node_modules/react-native-reanimated/src/shareables.ts b/node_modules/react-native-reanimated/src/shareables.ts
index 235f35c..9b2afdb 100644
--- a/node_modules/react-native-reanimated/src/shareables.ts
+++ b/node_modules/react-native-reanimated/src/shareables.ts
@@ -281,11 +281,16 @@ Offending code was: \`${getWorkletCode(value)}\``);
       return adapted;
     }
   }
+  try {
+    console.log('aaaaaaaaabb ', value, shouldPersistRemote)
   return NativeReanimatedModule.makeShareableClone(
     value,
     shouldPersistRemote,
     undefined
   );
+  } catch (e) {
+    console.log('aaaaaaaaa type', typeof value,  value, shouldPersistRemote, 'aaa error', e.toString())
+  }
 }
 
 const WORKLET_CODE_THRESHOLD = 255;
